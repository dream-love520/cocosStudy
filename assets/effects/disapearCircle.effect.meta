{
  "ver": "1.0.27",
  "uuid": "a4be2da1-d1e4-408c-8317-ac2127b2c815",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform float disapearValue;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float hideAngle = (1.0 - disapearValue)*360.0;\n  float u_x = v_uv0.x - 0.5;\n  float u_y = -v_uv0.y + 0.5;\n  float angle = 0.0;\n  if(u_y == 0.0){\n    if(u_x == 0.0){\n      angle = 360.0;\n    }else if(u_x > 0.0){\n      angle = 0.0;\n    }else{\n      angle = 180.0;\n    }\n  }else{\n    float t_v = u_x/u_y;\n    float a = abs(atan(t_v));\n    angle = a * 57.29577951308232;\n    if(u_x >=0.0 && u_y >=0.0){\n    }else if(u_x >= 0.0 && u_y <= 0.0){\n      angle = 180.0 - angle;\n    }else if(u_x <= 0.0 && u_y <= 0.0){\n      angle = angle + 180.0;\n    }else{\n      angle = 360.0 - angle;\n    }\n  }\n  if(angle < hideAngle){\n    o.a = 0.0;\n  }\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform Dissolve{\n    float disapearValue;\n };\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float hideAngle = (1.0 - disapearValue)*360.0;\n  float u_x = v_uv0.x - 0.5;\n  float u_y = -v_uv0.y + 0.5;\n  float angle = 0.0;\n  if(u_y == 0.0){\n    if(u_x == 0.0){\n      angle = 360.0;\n    }else if(u_x > 0.0){\n      angle = 0.0;\n    }else{\n      angle = 180.0;\n    }\n  }else{\n    float t_v = u_x/u_y;\n    float a = abs(atan(t_v));\n    angle = a * 57.29577951308232;\n    if(u_x >=0.0 && u_y >=0.0){\n    }else if(u_x >= 0.0 && u_y <= 0.0){\n      angle = 180.0 - angle;\n    }else if(u_x <= 0.0 && u_y <= 0.0){\n      angle = angle + 180.0;\n    }else{\n      angle = 360.0 - angle;\n    }\n  }\n  if(angle < hideAngle){\n    o.a = 0.0;\n  }\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}